import secrets
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from telegram.constants import ParseMode
from core.models import SessionLocal, PromoSetting
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

from core.models import SessionLocal, User, LicenseKey, Trial, Whitelist, add_days, now_utc

HELP_PRO = (
    "<b>G√≥i PRO</b>\n"
    "‚Ä¢ D√πng th·ª≠ 7 ng√†y: /trial\n"
    "‚Ä¢ Nh·∫≠p key: /redeem &lt;key&gt;\n"
    "‚Ä¢ T·∫°o key (OWNER): /genkey &lt;days&gt;\n"
    "‚Ä¢ Whitelist link: /wl_add &lt;domain&gt; | /wl_del &lt;domain&gt; | /wl_list\n"
)

async def pro_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(update.effective_chat.id, HELP_PRO, parse_mode=ParseMode.HTML)

async def ensure_user(user_id: int, username: str | None):
    db = SessionLocal()
    u = db.get(User, user_id)
    if not u:
        u = User(id=user_id, username=username or "")
        db.add(u)
        db.commit()
    return u

async def trial_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    db = SessionLocal()
    user = await ensure_user(u.id, u.username)

    ex = db.query(Trial).filter_by(user_id=u.id, active=True).one_or_none()
    if ex:
        return await update.message.reply_text("‚ùó B·∫°n ƒë√£ k√≠ch ho·∫°t trial tr∆∞·ªõc ƒë√≥.")

    trial = Trial(user_id=u.id, started_at=now_utc(), expires_at=add_days(7), active=True)
    user.is_pro = True
    user.pro_expires_at = trial.expires_at
    db.add(trial)
    db.commit()
    await update.message.reply_text("‚úÖ ƒê√£ k√≠ch ho·∫°t d√πng th·ª≠ 7 ng√†y!")

async def redeem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("C√∫ ph√°p: /redeem <key>")

    key = context.args[0].strip()
    db = SessionLocal()
    lk = db.query(LicenseKey).filter_by(key=key).one_or_none()
    if not lk or lk.used:
        return await update.message.reply_text("‚ùå Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ d√πng.")

    u = update.effective_user
    user = await ensure_user(u.id, u.username)

    user.is_pro = True
    user.pro_expires_at = add_days(lk.days)
    lk.used = True
    lk.issued_to = u.id
    db.commit()
    await update.message.reply_text(f"‚úÖ K√≠ch ho·∫°t PRO trong {lk.days} ng√†y.")

async def genkey_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE, owner_id: int):
    if update.effective_user.id != owner_id:
        return await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")

    days = 30
    if context.args:
        try:
            days = max(1, int(context.args[0]))
        except ValueError:
            return await update.message.reply_text("C√∫ ph√°p: /genkey <days>")

    key = "PRO-" + secrets.token_urlsafe(12)
    db = SessionLocal()
    lk = LicenseKey(key=key, days=days)
    db.add(lk); db.commit()

    await update.message.reply_text(f"üîë Key m·ªõi: <code>{key}</code> ({days} ng√†y)", parse_mode=ParseMode.HTML)

# Whitelist commands
async def wl_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("C√∫ ph√°p: /wl_add <domain>")
    domain = context.args[0].lower()
    db = SessionLocal()
    ex = db.query(Whitelist).filter_by(chat_id=update.effective_chat.id, domain=domain).one_or_none()
    if ex:
        return await update.message.reply_text("ƒê√£ c√≥ trong whitelist.")
    it = Whitelist(chat_id=update.effective_chat.id, domain=domain)
    db.add(it); db.commit()
    await update.message.reply_text(f"‚úÖ ƒê√£ th√™m: {domain}")

async def wl_del(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("C√∫ ph√°p: /wl_del <domain>")
    domain = context.args[0].lower()
    db = SessionLocal()
    it = db.query(Whitelist).filter_by(chat_id=update.effective_chat.id, domain=domain).one_or_none()
    if not it:
        return await update.message.reply_text("Kh√¥ng th·∫•y domain n√†y.")
    db.delete(it); db.commit()
    await update.message.reply_text(f"üóëÔ∏è ƒê√£ xo√°: {domain}")

async def wl_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    items = db.query(Whitelist).filter_by(chat_id=update.effective_chat.id).all()
    if not items:
        return await update.message.reply_text("Danh s√°ch whitelist tr·ªëng.")
    out = "\n".join(f"‚Ä¢ {i.domain}" for i in items)
    await update.message.reply_text(out)

def register_handlers(app: Application, owner_id: int | None = None):
    # PRO menu
    app.add_handler(CommandHandler("pro", pro_cmd))
    app.add_handler(CommandHandler("trial", trial_cmd))
    app.add_handler(CommandHandler("redeem", redeem_cmd))
    # owner genkey
    app.add_handler(CommandHandler("genkey", lambda u, c: genkey_cmd(u, c, owner_id or 0)))
    # whitelist
    async def _admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    try:
        m = await context.bot.get_chat_member(chat_id, user_id)
        return m.status in ("administrator", "creator")
    except Exception:
        return False

async def ad_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _admin_only(update, context):
        return await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
    db = SessionLocal()
    s = db.query(PromoSetting).filter_by(chat_id=update.effective_chat.id).one_or_none()
    if not s:
        s = PromoSetting(chat_id=update.effective_chat.id, enabled=True)
        db.add(s)
    else:
        s.enabled = True
    db.commit(); db.close()
    await update.message.reply_text("‚úÖ ƒê√£ b·∫≠t qu·∫£ng c√°o t·ª± ƒë·ªông cho nh√≥m n√†y.")

async def ad_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _admin_only(update, context):
        return await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
    db = SessionLocal()
    s = db.query(PromoSetting).filter_by(chat_id=update.effective_chat.id).one_or_none()
    if not s:
        s = PromoSetting(chat_id=update.effective_chat.id, enabled=False)
        db.add(s)
    else:
        s.enabled = False
    db.commit(); db.close()
    await update.message.reply_text("‚õîÔ∏è ƒê√£ t·∫Øt qu·∫£ng c√°o t·ª± ƒë·ªông cho nh√≥m n√†y.")

async def ad_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _admin_only(update, context):
        return await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
    text = " ".join(context.args).strip()
    if not text:
        return await update.message.reply_text("C√∫ ph√°p: /ad_set <n·ªôi dung>")
    db = SessionLocal()
    s = db.query(PromoSetting).filter_by(chat_id=update.effective_chat.id).one_or_none()
    if not s:
        s = PromoSetting(chat_id=update.effective_chat.id, enabled=True, text=text)
        db.add(s)
    else:
        s.text = text
    db.commit(); db.close()
    await update.message.reply_text("üìù ƒê√£ c·∫≠p nh·∫≠t n·ªôi dung qu·∫£ng c√°o.")

async def ad_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _admin_only(update, context):
        return await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
    if not context.args:
        return await update.message.reply_text("C√∫ ph√°p: /ad_interval <ph√∫t>")
    try:
        minutes = max(10, int(context.args[0]))
    except ValueError:
        return await update.message.reply_text("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá.")
    db = SessionLocal()
    s = db.query(PromoSetting).filter_by(chat_id=update.effective_chat.id).one_or_none()
    if not s:
        s = PromoSetting(chat_id=update.effective_chat.id, enabled=True, interval_min=minutes)
        db.add(s)
    else:
        s.interval_min = minutes
    db.commit(); db.close()
    await update.message.reply_text(f"‚è± Chu k·ª≥ qu·∫£ng c√°o: {minutes} ph√∫t.")
    app.add_handler(CommandHandler("wl_add", wl_add))
    app.add_handler(CommandHandler("wl_del", wl_del))
    app.add_handler(CommandHandler("wl_list", wl_list))
