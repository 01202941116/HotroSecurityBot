import os
import re
from telegram.ext import Updater, MessageHandler, Filters

# ====== C·∫§U H√åNH ======
# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render -> Environment -> Add "TELEGRAM_TOKEN")
TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()

# Danh s√°ch domain cho ph√©p (whitelist)
WHITELIST = [
    "youtube.com",
    "youtu.be",
    "duyenmy.vn",
]

# M·∫´u c·∫ßn ch·∫∑n (blacklist). D√πng regex, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng.
BLACKLIST_PATTERNS = [
    r"t\.me",        # link k√™nh/nh√≥m Telegram
    r"@\w+",        # mention @username
    r"sex",         # t·ª´ nh·∫°y c·∫£m
    r"18\+",        # 18+
    r"\.com",       # ch·∫∑n .com (tr·ª´ domain trong whitelist)
]

# ====== H√ÄM TI·ªÜN √çCH ======

def has_whitelisted_domain(text: str) -> bool:
    """Ki·ªÉm tra xem trong text c√≥ ch·ª©a domain whitelist kh√¥ng."""
    if not text:
        return False
    text_l = text.lower()
    for d in WHITELIST:
        if d in text_l:
            return True
    return False

def matches_blacklist(text: str) -> bool:
    """Text c√≥ kh·ªõp m·ªôt trong c√°c pattern blacklist kh√¥ng?"""
    if not text:
        return False
    text_l = text.lower()
    for pattern in BLACKLIST_PATTERNS:
        if re.search(pattern, text_l):
            return True
    return False

def get_all_text(update) -> str:
    """L·∫•y m·ªçi text c√≥ th·ªÉ xu·∫•t hi·ªán: text, caption‚Ä¶"""
    msg = update.message
    if not msg:
        return ""
    # gh√©p text + caption n·∫øu c√≥
    parts = []
    if msg.text:
        parts.append(msg.text)
    if msg.caption:
        parts.append(msg.caption)
    return "\n".join(parts).strip()

# ====== HANDLER CH√çNH ======

def anti_spam_handler(update, context):
    try:
        msg = update.message
        if not msg:
            return

        # G·ªôp text + caption
        text = get_all_text(update)

        # N·∫øu l√† tin nh·∫Øn forward, th∆∞·ªùng l√† qu·∫£ng c√°o ‚Üí x·ª≠ l√Ω nh∆∞ text
        # (n·∫øu b·∫°n mu·ªën x√≥a t·∫•t c·∫£ forward lu√¥n, b·ªè comment d√≤ng d∆∞·ªõi)
        # if msg.forward_from or msg.forward_from_chat:
        #     should_delete = True

        # Cho ph√©p n·∫øu ch·ª©a domain whitelist
        if has_whitelisted_domain(text):
            return

        # N·∫øu kh·ªõp blacklist ‚Üí x√≥a
        if matches_blacklist(text):
            context.bot.delete_message(chat_id=msg.chat_id, message_id=msg.message_id)
            print(f"üóë ƒê√£ x√≥a tin nh·∫Øn vi ph·∫°m: {text[:120]}")
            return

    except Exception as e:
        print(f"[anti_spam_handler] L·ªói: {e}")

def main():
    if not TOKEN:
        raise RuntimeError(
            "Thi·∫øu TELEGRAM_TOKEN. V√†o Render ‚Üí Environment ‚Üí Add Variable: "
            "Key=TELEGRAM_TOKEN, Value=<token c·ªßa BotFather>"
        )

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # Ch·∫∑n m·ªçi tin nh·∫Øn ch·ªØ/caption (kh√¥ng ph·∫£i command)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, anti_spam_handler))
    dp.add_handler(MessageHandler(Filters.caption, anti_spam_handler))
    # N·∫øu mu·ªën √°p cho c·∫£ media (·∫£nh/video/‚Ä¶ c√≥ ho·∫∑c kh√¥ng c√≥ caption), gi·ªØ d√≤ng d∆∞·ªõi:
    dp.add_handler(MessageHandler(Filters.photo | Filters.video | Filters.document | Filters.animation, anti_spam_handler))

    print("ü§ñ Bot ƒëang ch·∫°y‚Ä¶")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
