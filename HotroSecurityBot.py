# -*- coding: utf-8 -*-
import os
import re
import logging
from telegram import Update
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler

# ========= TOKEN =========
# ∆Øu ti√™n l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN tr√™n Render
TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not TOKEN:
    # c√≥ th·ªÉ thay t·∫°m ·ªü ƒë√¢y ƒë·ªÉ test local, nh∆∞ng khi l√™n Render h√£y set BOT_TOKEN
    TOKEN = "PASTE_YOUR_TOKEN_HERE"

# ========= LIST =========
# Link cho ph√©p (kh√¥ng x√≥a n·∫øu c√≥ ch·ª©a 1 trong c√°c domain n√†y)
WHITELIST = ["youtube.com", "youtu.be", "duyenmy.vn"]

# M·∫´u c·∫ßn ch·∫∑n (x√≥a n·∫øu KH√îNG thu·ªôc whitelist nh∆∞ng kh·ªõp 1 trong c√°c pattern n√†y)
BLACKLIST_PATTERNS = [
    r"t\.me",         # link t·ªõi k√™nh/nh√≥m telegram
    r"@\w+",          # mention @username
    r"\bsex\b",
    r"18\+",
    r"\bxxx\b"
]

# ========= LOGGING =========
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
log = logging.getLogger("HotroSecurityBot")

# ========= HELPERS =========
def extract_text(update: Update) -> str:
    msg = update.effective_message
    if not msg:
        return ""
    # ∆Øu ti√™n text, n·∫øu kh√¥ng c√≥ s·∫Ω l·∫•y caption (·∫£nh/video) ƒë·ªÉ v·∫´n l·ªçc ƒë∆∞·ª£c
    return (msg.text or msg.caption or "").lower()

def is_whitelisted(text: str) -> bool:
    return any(domain in text for domain in WHITELIST)

def is_blacklisted(text: str) -> bool:
    return any(re.search(p, text) for p in BLACKLIST_PATTERNS)

# ========= HANDLERS =========
def cmd_start(update: Update, context: CallbackContext):
    update.message.reply_text("ü§ñ Bot ƒë√£ b·∫≠t. Tin nh·∫Øn ch·ª©a @username, t.me, sex/18+‚Ä¶ s·∫Ω b·ªã x√≥a. "
                              "Link whitelist: " + ", ".join(WHITELIST))

def filter_message(update: Update, context: CallbackContext):
    msg = update.effective_message
    if not msg:
        return

    text = extract_text(update)
    if not text:
        return

    # Cho ph√©p n·∫øu ch·ª©a domain trong whitelist
    if is_whitelisted(text):
        return

    # X√≥a n·∫øu kh·ªõp blacklist
    if is_blacklisted(text):
        try:
            context.bot.delete_message(chat_id=msg.chat_id, message_id=msg.message_id)
            log.info(f"üóë ƒê√£ x√≥a: {text[:80]}")
        except Exception as e:
            log.warning(f"L·ªói khi x√≥a tin nh·∫Øn: {e}")

# ========= MAIN =========
def main():
    if not TOKEN or TOKEN == "PASTE_YOUR_TOKEN_HERE":
        raise RuntimeError("Thi·∫øu BOT_TOKEN. H√£y set bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN tr√™n Render.")

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", cmd_start))
    # L·ªçc c·∫£ message text v√† caption (·∫£nh/video k√®m m√¥ t·∫£)
    dp.add_handler(MessageHandler(Filters.text | Filters.caption, filter_message))

    log.info("ü§ñ Bot ƒëang ch·∫°y...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
