# HotroSecurityBot.py
# Compatible: python-telegram-bot==13.15  (Python 3.11.x)
# Ch·ª©c nƒÉng:
# - Xo√° tin nh·∫Øn c√≥ link ngo√†i whitelist
# - Ch·∫∑n @mention, t.me, t·ª´ kho√° b·∫©n (sex, 18+, ‚Ä¶)
# - Admin c√≥ th·ªÉ xem /status, th√™m/xo√° domain whitelist t·∫°m th·ªùi b·∫±ng l·ªánh
#   (danh s√°ch s·∫Ω m·∫•t khi bot restart ‚Äî ƒë∆°n gi·∫£n v√† nh·∫π)

import os
import re
import logging
from typing import Set, List

from telegram import Update
from telegram.ext import (
    Updater,
    CallbackContext,
    MessageHandler,
    Filters,
    CommandHandler,
)

# -------------------- C·∫•u h√¨nh c∆° b·∫£n --------------------
# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN (khuy·∫øn ngh·ªã).
# N·∫øu mu·ªën hard-code th√¨ ƒëi·ªÅn th·∫≥ng v√†o fallback b√™n d∆∞·ªõi.
BOT_TOKEN = os.getenv("BOT_TOKEN") or "PASTE_YOUR_BOT_TOKEN_HERE"

# Domain ƒë∆∞·ª£c ph√©p xu·∫•t hi·ªán trong tin nh·∫Øn (v√≠ d·ª• link youtube, website c·ªßa b·∫°n)
WHITELIST: Set[str] = set([
    "youtube.com",
    "youtu.be",
    "duyenmy.vn",
])

# C√°c m·∫´u c·∫ßn ch·∫∑n (regex, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
BLACKLIST_PATTERNS: List[re.Pattern] = [
    re.compile(r"\bt\.me\b", re.I),          # link ƒë·∫øn k√™nh/nh√≥m Telegram
    re.compile(r"(?<!\w)@\w+", re.I),        # @mentions
    re.compile(r"\bsex\b", re.I),
    re.compile(r"18\+", re.I),
]

# Regex b·∫Øt URL ƒë∆°n gi·∫£n (http/https + host + optional path)
URL_RE = re.compile(
    r"(?i)\bhttps?://([A-Z0-9.-]+)(?:/[^\s]*)?\b"
)

# -------------------- Logging ----------------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("HotroSecurityBot")

# -------------------- Helper -----------------------------
def user_is_admin(update: Update, context: CallbackContext) -> bool:
    """Tr·∫£ v·ªÅ True n·∫øu ng∆∞·ªùi g·ª≠i l√† admin/owner trong group."""
    try:
        chat = update.effective_chat
        user = update.effective_user
        if not chat or not user:
            return False
        member = chat.get_member(user.id)
        return member.status in ("administrator", "creator")
    except Exception:
        return False


def urls_in_text(text: str) -> List[str]:
    return [m.group(1).lower() for m in URL_RE.finditer(text or "")]


def url_allowed(host: str) -> bool:
    """Ki·ªÉm tra host c√≥ thu·ªôc whitelist kh√¥ng (so kh·ªõp ph·∫ßn ƒëu√¥i)."""
    if not host:
        return False
    for allow in WHITELIST:
        allow = allow.lower()
        if host == allow or host.endswith("." + allow):
            return True
    return False


def should_delete(text: str) -> bool:
    """Quy·∫øt ƒë·ªãnh c√≥ xo√° tin nh·∫Øn hay kh√¥ng."""
    if not text:
        return False

    # 1) N·∫øu c√≥ link => ch·ªâ cho ph√©p khi m·ªçi link ƒë·ªÅu thu·ªôc whitelist
    hosts = urls_in_text(text)
    if hosts:
        for h in hosts:
            if not url_allowed(h):
                return True  # c√≥ link ngo√†i whitelist

    # 2) Ki·ªÉm blacklist patterns (t.me, @mention, sex, 18+,...)
    for pat in BLACKLIST_PATTERNS:
        if pat.search(text):
            return True

    return False


def try_delete(update: Update, context: CallbackContext) -> None:
    """Th·ª≠ xo√° tin nh·∫Øn, nu·ªët l·ªói ƒë·ªÉ bot kh√¥ng crash."""
    try:
        chat_id = update.effective_chat.id
        msg_id = update.effective_message.message_id
        context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
    except Exception as e:
        log.warning("Kh√¥ng th·ªÉ xo√° tin nh·∫Øn: %s", e)


# -------------------- Handlers ---------------------------
def start_cmd(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "ü§ñ Bot ch·ªëng spam ƒë√£ s·∫µn s√†ng.\n"
        "‚Ä¢ T·ª± ƒë·ªông xo√° link ngo√†i whitelist\n"
        "‚Ä¢ Ch·∫∑n @mention, t.me, v√† c√°c t·ª´ kho√° b·∫©n\n"
        "L·ªánh h·ªØu √≠ch: /status, /whitelist_add, /whitelist_remove"
    )


def status_cmd(update: Update, context: CallbackContext) -> None:
    wl = "\n - ".join(sorted(WHITELIST)) or "(tr·ªëng)"
    update.message.reply_text(
        "‚úÖ Tr·∫°ng th√°i b·ªô l·ªçc:\n"
        f"‚Ä¢ Whitelist:\n - {wl}\n"
        "‚Ä¢ Blacklist: t.me, @mention, sex, 18+"
    )


def whitelist_add_cmd(update: Update, context: CallbackContext) -> None:
    if not user_is_admin(update, context):
        return
    if not context.args:
        update.message.reply_text("D√πng: /whitelist_add domain.com")
        return
    domain = context.args[0].lower().strip()
    WHITELIST.add(domain)
    update.message.reply_text(f"‚úÖ ƒê√£ th√™m '{domain}' v√†o whitelist (t·∫°m th·ªùi).")


def whitelist_remove_cmd(update: Update, context: CallbackContext) -> None:
    if not user_is_admin(update, context):
        return
    if not context.args:
        update.message.reply_text("D√πng: /whitelist_remove domain.com")
        return
    domain = context.args[0].lower().strip()
    if domain in WHITELIST:
        WHITELIST.remove(domain)
        update.message.reply_text(f"‚úÖ ƒê√£ xo√° '{domain}' kh·ªèi whitelist.")
    else:
        update.message.reply_text(f"‚ÑπÔ∏è '{domain}' kh√¥ng c√≥ trong whitelist.")


def cleaner(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω m·ªçi tin nh·∫Øn vƒÉn b·∫£n."""
    msg = update.effective_message
    text = (msg.text or msg.caption or "").strip()

    # Cho admin g·ª≠i tho·∫£i m√°i
    if user_is_admin(update, context):
        return

    if should_delete(text):
        log.info("Xo√°: %s", text)
        try_delete(update, context)


def error_handler(update: object, context: CallbackContext) -> None:
    log.exception("L·ªói kh√¥ng b·∫Øt ƒë∆∞·ª£c: %s", context.error)


# -------------------- Main -------------------------------
def main() -> None:
    if not BOT_TOKEN or BOT_TOKEN == "PASTE_YOUR_BOT_TOKEN_HERE":
        raise SystemExit("‚ùå Thi·∫øu BOT_TOKEN. ƒê·∫∑t env BOT_TOKEN ho·∫∑c ƒëi·ªÅn tr·ª±c ti·∫øp trong m√£.")

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # L·ªánh
    dp.add_handler(CommandHandler("start", start_cmd))
    dp.add_handler(CommandHandler("status", status_cmd))
    dp.add_handler(CommandHandler("whitelist_add", whitelist_add_cmd))
    dp.add_handler(CommandHandler("whitelist_remove", whitelist_remove_cmd))

    # L·ªçc tin nh·∫Øn (text & caption)
    dp.add_handler(MessageHandler(Filters.text | Filters.caption, cleaner))

    dp.add_error_handler(error_handler)

    log.info("ü§ñ Bot ƒëang ch·∫°y...")
    updater.start_polling(clean=True)
    updater.idle()


if __name__ == "__main__":
    main()
