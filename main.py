import sys
sys.modules.pop("core.models", None)  # tr√°nh import v√≤ng khi redeploy

import os, re, threading
from datetime import datetime, timedelta

from telegram import Update, ChatPermissions
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.constants import ParseMode

from core.models import init_db, SessionLocal, Setting, Filter, Whitelist
from keep_alive_server import keep_alive

# pro modules (an to√†n n·∫øu thi·∫øu)
try:
    from pro.handlers import register_handlers
except Exception as e:
    print("pro.handlers warn:", e)
    register_handlers = lambda app, **kw: None
try:
    from pro.scheduler import attach_scheduler
except Exception as e:
    print("pro.scheduler warn:", e)
    attach_scheduler = lambda app: None

# ===== ENV =====
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
CONTACT_USERNAME = os.getenv("CONTACT_USERNAME", "").strip()

# ===== STATE =====
FLOOD = {}
LINK_RE = re.compile(r"(https?://|http://|www\.|t\.me/|@\w+|[a-zA-Z0-9-]+\.(com|net|org|vn|xyz|info)(/[^\s]*)?)", re.IGNORECASE)

# ===== Helpers =====
def get_settings(chat_id: int) -> Setting:
    db = SessionLocal()
    s = db.query(Setting).filter_by(chat_id=chat_id).one_or_none()
    if not s:
        s = Setting(chat_id=chat_id, antilink=True, antimention=True, antiforward=True, flood_limit=3, flood_mode="mute")
        db.add(s); db.commit()
    return s

# ===== Commands FREE =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(update.effective_chat.id, "Xin ch√†o! G√µ /help ƒë·ªÉ xem l·ªánh.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "<b>HotroSecurityBot ‚Äì Full</b>\n\n"
        "<b>FREE</b>\n"
        "/filter_add &lt;t·ª´&gt; ‚Äì th√™m t·ª´ kho√° ch·∫∑n\n"
        "/filter_list ‚Äì xem danh s√°ch t·ª´ kho√°\n"
        "/filter_del &lt;id&gt; ‚Äì xo√° filter theo ID\n"
        "/antilink_on | /antilink_off\n"
        "/antimention_on | /antimention_off\n"
        "/antiforward_on | /antiforward_off\n"
        "/setflood &lt;n&gt; ‚Äì gi·ªõi h·∫°n spam (m·∫∑c ƒë·ªãnh 3)\n\n"
        "<b>PRO</b>\n"
        "/pro ‚Äì b·∫£ng d√πng th·ª≠ / nh·∫≠p key\n"
        "/trial ‚Äì d√πng th·ª≠ 7 ng√†y\n"
        "/redeem &lt;key&gt; ‚Äì k√≠ch ho·∫°t key\n"
        "/genkey &lt;days&gt; ‚Äì (OWNER) sinh key\n"
        "/wl_add &lt;domain&gt; | /wl_del &lt;domain&gt; | /wl_list ‚Äì whitelist link\n\n"
        f"Li√™n h·ªá @{CONTACT_USERNAME or 'HotroSecurity_Bot'} ƒë·ªÉ mua key PRO."
    )
    await context.bot.send_message(update.effective_chat.id, txt, parse_mode=ParseMode.HTML)

async def filter_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("C√∫ ph√°p: <code>/filter_add t·ª´_kho√°</code>", parse_mode="HTML")
    pattern = " ".join(context.args).strip()
    if not pattern:
        return await update.message.reply_text("T·ª´ kho√° r·ªóng.")
    db = SessionLocal()
    f = Filter(chat_id=update.effective_chat.id, pattern=pattern)
    db.add(f); db.commit()
    await update.message.reply_text(f"‚úÖ ƒê√£ th√™m filter #{f.id}: <code>{pattern}</code>", parse_mode="HTML")

async def filter_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = SessionLocal()
    items = db.query(Filter).filter_by(chat_id=update.effective_chat.id).all()
    if not items:
        return await update.message.reply_text("Danh s√°ch filter tr·ªëng.")
    out = ["<b>Filters:</b>"] + [f"{i.id}. <code>{i.pattern}</code>" for i in items]
    await update.message.reply_text("\n".join(out), parse_mode=ParseMode.HTML)

async def filter_del(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("C√∫ ph√°p: /filter_del <id>")
    try:
        fid = int(context.args[0])
    except ValueError:
        return await update.message.reply_text("ID kh√¥ng h·ª£p l·ªá.")
    db = SessionLocal()
    it = db.query(Filter).filter_by(id=fid, chat_id=update.effective_chat.id).one_or_none()
    if not it:
        return await update.message.reply_text("Kh√¥ng t√¨m th·∫•y ID.")
    db.delete(it); db.commit()
    await update.message.reply_text(f"üóëÔ∏è ƒê√£ xo√° filter #{fid}.")

async def toggle(update: Update, field: str, val: bool, label: str):
    db = SessionLocal()
    s = db.query(Setting).filter_by(chat_id=update.effective_chat.id).one_or_none()
    if not s:
        s = Setting(chat_id=update.effective_chat.id); db.add(s)
    setattr(s, field, val); db.commit()
    await update.message.reply_text(("‚úÖ B·∫≠t " if val else "‚ùé T·∫Øt ") + label + ".")

async def antilink_on(update, context):     await toggle(update, "antilink", True,  "Anti-link")
async def antilink_off(update, context):    await toggle(update, "antilink", False, "Anti-link")
async def antimention_on(update, context):  await toggle(update, "antimention", True,  "Anti-mention")
async def antimention_off(update, context): await toggle(update, "antimention", False, "Anti-mention")
async def antiforward_on(update, context):  await toggle(update, "antiforward", True,  "Anti-forward")
async def antiforward_off(update, context): await toggle(update, "antiforward", False, "Anti-forward")

async def setflood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args: return await update.message.reply_text("C√∫ ph√°p: /setflood <s·ªë tin>")
    try:
        n = max(2, int(context.args[0]))
    except ValueError:
        return await update.message.reply_text("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá.")
    db = SessionLocal()
    s = db.query(Setting).filter_by(chat_id=update.effective_chat.id).one_or_none()
    if not s: s = Setting(chat_id=update.effective_chat.id); db.add(s)
    s.flood_limit = n; db.commit()
    await update.message.reply_text(f"‚úÖ Flood limit = {n}")

# ===== Guard (kh√¥ng b·∫Øt command) =====
async def guard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg: return
    if msg.text and msg.text.startswith("/"): return

    chat_id = update.effective_chat.id
    text = (msg.text or msg.caption or "")

    db = SessionLocal()
    s = get_settings(chat_id)

    for it in db.query(Filter).filter_by(chat_id=chat_id).all():
        if it.pattern.lower() in text.lower():
            try: await msg.delete()
            except Exception: pass
            return

    if s.antiforward and getattr(msg, "forward_origin", None):
        try: await msg.delete()
        except Exception: pass
        return

    if s.antilink and LINK_RE.search(text):
        wl = [w.domain for w in db.query(Whitelist).filter_by(chat_id=chat_id).all()]
        if not any(d and d.lower() in text.lower() for d in wl):
            try: await msg.delete()
            except Exception: pass
            return

    if s.antimention and "@" in text:
        try: await msg.delete()
        except Exception: pass
        return

    key = (chat_id, msg.from_user.id)
    now = datetime.now().timestamp()
    bucket = [t for t in FLOOD.get(key, []) if now - t < 10]
    bucket.append(now); FLOOD[key] = bucket
    if len(bucket) > s.flood_limit and s.flood_mode == "mute":
        try:
            until = datetime.now() + timedelta(minutes=5)
            await context.bot.restrict_chat_member(chat_id, msg.from_user.id,
                ChatPermissions(can_send_messages=False), until_date=until)
        except Exception: pass

# ===== Error log =====
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    print("ERROR:", repr(context.error))

# ===== Startup hook =====
async def on_startup(app: Application):
    try:
        me = await app.bot.get_me()
        app.bot_data["contact"] = me.username or CONTACT_USERNAME
    except Exception:
        app.bot_data["contact"] = CONTACT_USERNAME or "admin"

# ===== Main =====
def main():
    if not BOT_TOKEN:
        raise SystemExit("‚ùå Missing BOT_TOKEN")

    print("PTB boot ‚Äî token prefix:", BOT_TOKEN[:10], "‚Ä¶")
    init_db()

    # Gi·ªØ bot s·ªëng
    try:
        keep_alive()  # ‚úÖ d√≤ng n√†y ph·∫£i th·ª•t v√†o trong kh·ªëi try
    except Exception as e:
        print("L·ªói keep_alive:", e)

    app = Application.builder().token(BOT_TOKEN).build()
    app.post_init = on_startup
    app.add_error_handler(on_error)

    # FREE
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("filter_add", filter_add))
    app.add_handler(CommandHandler("filter_list", filter_list))
    app.add_handler(CommandHandler("filter_del", filter_del))
    app.add_handler(CommandHandler("antilink_on", antilink_on))
    app.add_handler(CommandHandler("antilink_off", antilink_off))
    app.add_handler(CommandHandler("antimention_on", antimention_on))
    app.add_handler(CommandHandler("antimention_off", antimention_off))
    app.add_handler(CommandHandler("antiforward_on", antiforward_on))
    app.add_handler(CommandHandler("antiforward_off", antiforward_off))
    app.add_handler(CommandHandler("setflood", setflood))

    # PRO
    register_handlers(app, owner_id=OWNER_ID)
    attach_scheduler(app)

    # Guard
    app.add_handler(MessageHandler(~filters.StatusUpdate.ALL & ~filters.COMMAND, guard))

    print("‚úÖ Bot started.")
    app.run_polling()


if __name__ == "__main__":
    main()
